const { connect, safeWrite } = require('./mikrotik');
const { logToFile } = require('../utils/log');
const { GuiThongBaoTele } = require('../utils/messageUtils');

const pppoeList = ['pppoe-out1', 'pppoe-out2'];

async function monitorPPPoEs() {
  try {
    const router = await connect();
    let failList = [];
    let totalPPPoE = 0;
    let failedPPPoE = 0;

    for (const iface of pppoeList) {
      totalPPPoE++;

      // Ki·ªÉm tra ƒë·ªãa ch·ªâ IP c·ªßa interface
      const ipAddr = await safeWrite(router, '/ip/address/print', [`?interface=${iface}`]);
      if (ipAddr.length === 0) {
        failList.push(`‚ùå ${iface}: kh√¥ng c√≥ IP`);
        failedPPPoE++;

        // L·∫•y .id c·ªßa route li√™n quan ƒë·∫øn interface
        const routeId = await safeWrite(router, '/ip/route/print', [`?gateway=${iface}`]);
        if (routeId.length > 0) {
          await safeWrite(router, '/ip/route/disable', [`=.id=${routeId[0]['.id']}`]);
        }
        continue;
      }

      // Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng ping
      const pingResult = await safeWrite(router, '/ping', [
        `=address=8.8.8.8`,
        `=interface=${iface}`,
        `=count=3`,
        `=interval=1s`
      ]);

      if (pingResult.length === 0 || pingResult[0].received === '0') {
        failList.push(`‚ùå ${iface}: kh√¥ng ping ƒë∆∞·ª£c`);
        failedPPPoE++;

        // L·∫•y .id c·ªßa route li√™n quan ƒë·∫øn interface
        const routeId = await safeWrite(router, '/ip/route/print', [`?gateway=${iface}`]);
        if (routeId.length > 0) {
          await safeWrite(router, '/ip/route/disable', [`=.id=${routeId[0]['.id']}`]);
        }
      } else {
        // K√≠ch ho·∫°t l·∫°i c√¢n b·∫±ng t·∫£i n·∫øu interface ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
        const routeId = await safeWrite(router, '/ip/route/print', [`?gateway=${iface}`]);
        if (routeId.length > 0) {
          await safeWrite(router, '/ip/route/enable', [`=.id=${routeId[0]['.id']}`]);
        }
      }
    }

    // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ l·ªói
    if (failedPPPoE > 0) {
      const message = `üö® C·∫¢NH B√ÅO M·∫†NG PPPoE!\n\n${failList.join('\n')}`;
      await GuiThongBaoTele(message);
      console.log(`[C·∫¢NH B√ÅO] ${failedPPPoE}/${totalPPPoE} k·∫øt n·ªëi PPPoE g·∫∑p s·ª± c·ªë.`);
    } else {
      console.log('[TH√îNG TIN] T·∫•t c·∫£ k·∫øt n·ªëi PPPoE ƒë·ªÅu ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.');
    }
  } catch (err) {
    console.log(`[L·ªñI] Kh√¥ng th·ªÉ ki·ªÉm tra k·∫øt n·ªëi PPPoE: ${err.message}`);
  }
}

module.exports = { monitorPPPoEs };