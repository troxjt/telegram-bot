const { getConnection, releaseConnection, safeWrite } = require('../models/mikrotik');
const { sendAndDeleteMessage } = require('../utils/messageUtils');
const { logToFile } = require('../utils/log');

const handleBlacklist = async (bot, chatId) => {
    let router;
    const lists = ['blacklist', 'ssh_blacklist', 'ftp_blacklist', 'port_scanners'];
    let message = 'üìõ *DANH S√ÅCH ƒê·ªäA CH·ªà B·ªä CH·∫∂N:*\n\n';

    try {
        router = await getConnection();
        const allEntries = await safeWrite(router, '/ip/firewall/address-list/print');

        if (!Array.isArray(allEntries) || allEntries.length === 0) {
            sendAndDeleteMessage(bot, chatId, '‚úÖ Kh√¥ng c√≥ ƒë·ªãa ch·ªâ n√†o ƒëang b·ªã ch·∫∑n.');
            return;
        }

        lists.forEach((list) => {
            const filtered = allEntries.filter((e) => e.list === list);

            if (filtered.length === 0) {
                message += `üìÇ *${list.toUpperCase()}*: _Kh√¥ng c√≥ ƒë·ªãa ch·ªâ n√†o._\n\n`;
                return;
            }

            message += `üìÇ *${list.toUpperCase()}* (${filtered.length} m·ª•c):\n`;
            filtered.forEach((e, i) => {
                const comment = e.comment ? `(${e.comment})` : '';
                message += ` ${i + 1}. ${e.address} ${comment}\n`;
            });
            message += '\n';
        });

        const chunks = message.match(/([\s\S]{1,3500})/g) || [];
        for (const chunk of chunks) {
            await sendAndDeleteMessage(bot, chatId, chunk, { parse_mode: 'Markdown' });
        }

    } catch (err) {
        logToFile('‚ùå L·ªói khi l·∫•y danh s√°ch address-list:', err);
        sendAndDeleteMessage(bot, chatId, '‚ùå L·ªói khi l·∫•y danh s√°ch blacklist.');
    } finally {
        if (router) releaseConnection(router);
    }
};

module.exports = { handleBlacklist };